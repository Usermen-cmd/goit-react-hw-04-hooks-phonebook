{"version":3,"sources":["styles/InputContainer.js","Components/Phonebook/FindContact/FindContact.jsx","utils/validationInput.js","styles/AlertMessage.js","Components/Phonebook/AddContactForm/ContactForm.jsx","Components/Phonebook/AddContactForm/AddContactForm.jsx","styles/deleteBtn.js","Components/Phonebook/ContactItems/ContactItems.jsx","utils/isUniqName.js","utils/getMessageForEmptyContactList.js","styles/ContainerPhonebook.js","styles/ContactList.js","Components/Phonebook/Phonebook.jsx","App.jsx","index.js"],"names":["InputContainer","FindContact","children","addFindFilterValue","type","onChange","DisplayingErrorMessagesSchema","Yup","shape","name","min","max","required","tel","phone","AlertMessage","ContactForm","errors","touched","htmlFor","id","placeholder","style","left","AddContactForm","submit","useState","buttonStatus","setButtonStatus","onClick","prev","size","initialValues","onSubmit","event","actions","uuidv4","resetForm","validationSchema","Button","stylesIcon","width","height","ContactItems","contacts","onDeleteClick","noContactsMessage","length","map","el","defaultProps","isUniqueName","names","isUniq","forEach","getMessageForEmptyContactList","filtredContactList","ContainerPhonebook","ContactList","Phonebook","JSON","parse","localStorage","getItem","setContacts","toggleMessage","setToggleMessage","toggleSort","setToggleSort","filter","setFilter","useEffect","setItem","stringify","toLowerCase","includes","getFilterdContactList","messageForEmptyContactList","contact","prevContacts","timeoutID","setTimeout","clearTimeout","normalizeValue","target","value","sortContacts","sortArray","reverse","dataId","currentTarget","dataset","remainderContacts","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c8fcd6b6.chunk.js","sourcesContent":["import styled from '@emotion/styled/macro';\r\n\r\nexport const InputContainer = styled.div`\r\n  margin-bottom: 30px;\r\n`;\r\n","import PropTypes from 'prop-types';\r\n//Styles\r\nimport { InputContainer } from 'styles/InputContainer';\r\n\r\nconst FindContact = ({ children, addFindFilterValue }) => {\r\n  return (\r\n    <InputContainer>\r\n      <h3>Find contact by name</h3>\r\n      <input type=\"text\" onChange={addFindFilterValue} />\r\n      {children}\r\n    </InputContainer>\r\n  );\r\n};\r\n\r\nFindContact.propTypes = {\r\n  addFindFilterValue: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FindContact;\r\n","import * as Yup from 'yup';\r\nimport 'yup-phone';\r\n\r\nconst errorMessageInvalidPhone = 'Вы ввели не корректный номер телефона';\r\nconst errorMessageRequiredName = 'Введите имя';\r\nconst erroeMessageTooLong = 'Имя слишком длинное';\r\nconst erroeMessageTooShort = 'Имя слишком короткое';\r\n\r\nconst DisplayingErrorMessagesSchema = Yup.object().shape({\r\n  name: Yup.string()\r\n    .min(2, erroeMessageTooShort)\r\n    .max(20, erroeMessageTooLong)\r\n    .required(errorMessageRequiredName),\r\n  tel: Yup.string().phone('', false, errorMessageInvalidPhone).required(),\r\n});\r\n\r\nexport default DisplayingErrorMessagesSchema;\r\n","import styled from '@emotion/styled/macro';\r\n\r\nexport const AlertMessage = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 5px 10px;\r\n  background-color: tomato;\r\n  position: absolute;\r\n  top: 30px;\r\n  left: 0;\r\n  color: #fff;\r\n  border-radius: 2px;\r\n  box-shadow: 0px 0px 5px 3px #ff0000;\r\n`;\r\n","import { Form, Field } from 'formik';\r\n//Utils\r\nimport { AlertMessage } from 'styles/AlertMessage';\r\n\r\nconst ContactForm = ({ errors, touched, children }) => {\r\n  return (\r\n    <Form>\r\n      <label htmlFor=\"name\">Name</label>\r\n      <Field id=\"name\" name=\"name\" placeholder=\"Enter name\" />\r\n\r\n      {touched.name && errors.name && (\r\n        <AlertMessage>{errors.name}</AlertMessage>\r\n      )}\r\n      <label htmlFor=\"tel\">Phone</label>\r\n      <Field id=\"tel\" name=\"tel\" placeholder=\"Enter phone number\" />\r\n\r\n      {touched.tel && errors.tel && (\r\n        <AlertMessage style={{ left: '238px' }}>{errors.tel}</AlertMessage>\r\n      )}\r\n      <button type=\"submit\">add</button>\r\n      {children}\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n//Utils\r\nimport DisplayingErrorMessagesSchema from 'utils/validationInput';\r\nimport { Formik } from 'formik';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n//Components\r\nimport { AiFillPlusCircle, AiOutlineClose } from 'react-icons/ai';\r\nimport ContactForm from 'Components/Phonebook/AddContactForm/ContactForm';\r\n\r\nconst AddContactForm = ({ submit, children }) => {\r\n  const [buttonStatus, setButtonStatus] = useState(false);\r\n\r\n  function toggleForm() {\r\n    setButtonStatus(prev => !prev);\r\n  }\r\n\r\n  function onSubmitForm(event, actions) {\r\n    const id = uuidv4();\r\n    submit({ ...event, id });\r\n    actions.resetForm();\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <button type=\"button\" onClick={toggleForm}>\r\n        {buttonStatus ? (\r\n          <AiOutlineClose size={30} />\r\n        ) : (\r\n          <AiFillPlusCircle size={30} />\r\n        )}\r\n      </button>\r\n      {buttonStatus && (\r\n        <Formik\r\n          initialValues={{\r\n            name: '',\r\n            tel: '',\r\n          }}\r\n          onSubmit={onSubmitForm}\r\n          validationSchema={DisplayingErrorMessagesSchema}\r\n        >\r\n          {({ errors, touched }) => (\r\n            <ContactForm errors={errors} touched={touched}>\r\n              {buttonStatus && children}\r\n            </ContactForm>\r\n          )}\r\n        </Formik>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nAddContactForm.propTypes = {\r\n  submit: PropTypes.func.isRequired,\r\n  children: PropTypes.bool,\r\n};\r\n\r\nexport default AddContactForm;\r\n","import styled from '@emotion/styled/macro';\r\n\r\nexport const Button = styled.button`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-radius: 50%;\r\n  border: none;\r\n  outline: none;\r\n  padding: 8px;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { AiFillDelete } from 'react-icons/ai';\r\nimport { Button } from 'styles/deleteBtn';\r\n\r\nconst stylesIcon = {\r\n  width: '20px',\r\n  height: '20px',\r\n};\r\n\r\nconst ContactItems = ({ contacts, onDeleteClick, noContactsMessage }) => {\r\n  return (\r\n    <>\r\n      {contacts.length\r\n        ? contacts.map(el => {\r\n            return (\r\n              <li key={el.id}>\r\n                {el.name} : {el.tel}\r\n                <Button\r\n                  type=\"button\"\r\n                  data-id={el.id}\r\n                  onClick={onDeleteClick}\r\n                  aria-label=\"delete contact\"\r\n                >\r\n                  <AiFillDelete style={stylesIcon} />\r\n                </Button>\r\n              </li>\r\n            );\r\n          })\r\n        : noContactsMessage}\r\n    </>\r\n  );\r\n};\r\n\r\nContactItems.defaultProps = {\r\n  noContactsMessage: 'телефонная книга пуста!',\r\n};\r\n\r\nContactItems.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      tel: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDeleteClick: PropTypes.func.isRequired,\r\n  noContactsMessage: PropTypes.string,\r\n};\r\n\r\nexport default ContactItems;\r\n","const isUniqueName = (name, names) => {\r\n  let isUniq = true;\r\n  names.forEach(el => {\r\n    if (el.name === name) {\r\n      isUniq = !isUniq;\r\n    }\r\n  });\r\n  return isUniq;\r\n};\r\nexport default isUniqueName;\r\n","const getMessageForEmptyContactList = (contacts, filtredContactList) => {\r\n  const messageOption = contacts?.length > filtredContactList?.length;\r\n  return messageOption\r\n    ? 'В списке контактов нет такого имени'\r\n    : 'Вы не добавили ни одного контакта';\r\n};\r\nexport default getMessageForEmptyContactList;\r\n","import styled from '@emotion/styled/macro';\r\n\r\nexport const ContainerPhonebook = styled.div`\r\n  box-sizing: border-box;\r\n  padding: 20px 30px;\r\n  width: 1200px;\r\n  background: rgb(34, 193, 195);\r\n  background: linear-gradient(\r\n    0deg,\r\n    rgba(34, 193, 195, 1) 0%,\r\n    rgba(123, 90, 149, 1) 100%\r\n  );\r\n  form {\r\n    display: inline-block;\r\n    margin-right: 40px;\r\n    position: relative;\r\n    margin-bottom: 30px;\r\n  }\r\n  & > button {\r\n    margin-bottom: 30px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border-radius: 50%;\r\n    padding: 0px;\r\n    border: none;\r\n    outline: none;\r\n  }\r\n  margin: 0 auto;\r\n  h1 {\r\n    margin-bottom: 30px;\r\n  }\r\n  h2 {\r\n    margin-bottom: 20px;\r\n  }\r\n  h3 {\r\n    margin-bottom: 20px;\r\n  }\r\n  input {\r\n    margin-right: 10px;\r\n  }\r\n  label {\r\n    margin-right: 10px;\r\n  }\r\n`;\r\n","import styled from '@emotion/styled/macro';\r\n\r\nexport const ContactList = styled.ul`\r\n  width: 400px;\r\n  li {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    margin-bottom: 8px;\r\n  }\r\n`;\r\n","import { useState, useEffect } from 'react';\r\n//Components\r\nimport FindContact from 'Components/Phonebook/FindContact/FindContact';\r\nimport AddContactForm from 'Components/Phonebook/AddContactForm/AddContactForm';\r\nimport ContactItems from 'Components/Phonebook/ContactItems/ContactItems';\r\n//Utils\r\nimport sortArray from 'array-sort';\r\nimport isUniqueName from 'utils/isUniqName';\r\nimport getMessageForEmptyContactList from 'utils/getMessageForEmptyContactList';\r\n//Styles\r\nimport { ContainerPhonebook } from 'styles/ContainerPhonebook';\r\nimport { ContactList } from 'styles/ContactList';\r\nimport { AlertMessage } from 'styles/AlertMessage';\r\n\r\nexport default function Phonebook() {\r\n  const [contacts, setContacts] = useState(() => {\r\n    return JSON.parse(localStorage.getItem('state')) || [];\r\n  });\r\n  const [toggleMessage, setToggleMessage] = useState(false);\r\n  const [toggleSort, setToggleSort] = useState(false);\r\n  const [filter, setFilter] = useState('');\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('state', JSON.stringify(contacts));\r\n  }, [contacts]);\r\n\r\n  function getContact(contact) {\r\n    const isUniqName = isUniqueName(contact.name, contacts);\r\n    if (isUniqName) {\r\n      setContacts(prevContacts => [...prevContacts, contact]);\r\n      return;\r\n    }\r\n\r\n    setToggleMessage(!toggleMessage);\r\n    const timeoutID = setTimeout(() => {\r\n      setToggleMessage(prev => !prev);\r\n      clearTimeout(timeoutID);\r\n    }, 2000);\r\n  }\r\n\r\n  function onDeleteBtnClick(event) {\r\n    const dataId = event.currentTarget.dataset.id;\r\n    const remainderContacts = contacts.filter(contact => contact.id !== dataId);\r\n    setContacts(remainderContacts);\r\n  }\r\n\r\n  function onSortBtnClick() {\r\n    const sortContacts = sortArray(contacts, 'name', {\r\n      reverse: toggleSort,\r\n    });\r\n    setContacts(sortContacts);\r\n    setToggleSort(prev => !prev);\r\n  }\r\n\r\n  function addFindFilterValue(event) {\r\n    const normalizeValue = event.target.value.toLowerCase();\r\n    setFilter(normalizeValue);\r\n  }\r\n\r\n  function getFilterdContactList() {\r\n    if (filter) {\r\n      const filtredContacts = contacts.filter(el =>\r\n        el.name.toLowerCase().includes(filter),\r\n      );\r\n      return filtredContacts;\r\n    }\r\n  }\r\n\r\n  const filtredContactList = getFilterdContactList();\r\n  const messageForEmptyContactList = getMessageForEmptyContactList(\r\n    contacts,\r\n    filtredContactList,\r\n  );\r\n\r\n  return (\r\n    <ContainerPhonebook>\r\n      <h1>Phonebook</h1>\r\n      <AddContactForm submit={getContact}>\r\n        {toggleMessage && (\r\n          <AlertMessage>Такое имя уже есть в списке контактов</AlertMessage>\r\n        )}\r\n      </AddContactForm>\r\n      <h2>contacts</h2>\r\n      <FindContact addFindFilterValue={addFindFilterValue}>\r\n        <button type=\"button\" onClick={onSortBtnClick}>\r\n          sort contact\r\n        </button>\r\n      </FindContact>\r\n      <ContactList>\r\n        <ContactItems\r\n          contacts={filtredContactList || contacts}\r\n          onDeleteClick={onDeleteBtnClick}\r\n          noContactsMessage={messageForEmptyContactList}\r\n        />\r\n      </ContactList>\r\n    </ContainerPhonebook>\r\n  );\r\n}\r\n","// Componensts\r\nimport Phonebook from 'Components/Phonebook/Phonebook';\r\n\r\nconst App = () => {\r\n  return <Phonebook />;\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}